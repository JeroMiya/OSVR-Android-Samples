import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "com.osvr.osvropenglsample"
        minSdkVersion 22
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // some of the config below is based off of the crystax-ndk documentation:
    // source: https://www.crystax.net/en/blog/3

    task ndkBuild(type: Exec) {
      workingDir file('src/main')
      commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
      compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
      workingDir file('src/main')
      commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}
